<?php
    namespace common\components;

    use Yii;
    use yii\helpers\Url;

    /**
     * Base  controller component
     * @package yii\components
     */
    class Controller extends \yii\web\Controller
    {
        public $enableCsrfValidation = false;
        //  public $layout = '@cms/views/layouts/main';
        public $rootActions = [];
        public $error = null;

        public $title = null;
        public $userInfo = [];
        public $upload_file = null;
        public $upload_image = null;
        public $upload_video = null;
        public $upload_thumb = null;
        public $setting = null;

        public function init()
        {
            $this->upload_file = Yii::$app->params['UPLOAD_FILE'];
            $this->upload_video = Yii::$app->params['UPLOAD_VIDEO'];
            $this->upload_image = Yii::$app->params['UPLOAD_IMAGE'];
            $this->upload_thumb = Yii::$app->params['UPLOAD_THUMB'];

            parent::init(); // TODO: Change the autogenerated stub
            if(\Yii::$app->request->headers->get('X-Refresh-Cache') == \Yii::$app->params['refresh_cache']){
                \Yii::$app->cache->flush();
            }

            if($this->setting == null){
                $this->setting = CommonLib::getAllSettings();
            }
        }


        public function beforeAction($action)
        {

            if (!parent::beforeAction($action))
                return false;

            if(Yii::$app->user->isGuest){
                $this->setReturnUrl(Yii::$app->request->url);
                return Yii::$app->getResponse()->redirect(['/sign/in']);
            }
            else{
                $this->userInfo = \Yii::$app->user->identity;
                if($action->id === 'index'){
                    $this->setReturnUrl();
                }

                return true;
            }
        }
        /**
         * Check authentication, and root rights for actions
         * @param \yii\base\Action $action
         * @return bool
         * @throws \yii\web\BadRequestHttpException
         * @throws \yii\web\ForbiddenHttpException
         */
        private function deleteDir($directory)
        {
            $iterator = new \RecursiveDirectoryIterator($directory, \RecursiveDirectoryIterator::SKIP_DOTS);
            $files = new \RecursiveIteratorIterator($iterator, \RecursiveIteratorIterator::CHILD_FIRST);
            foreach($files as $file) {
                if ($file->isDir()){
                    rmdir($file->getRealPath());
                } else {
                    if($file->getRealPath()) {
                        unlink($file->getRealPath());
                    }
                }
            }

            return file_exists($directory) ?  rmdir($directory) : false;
        }

        /**
         * Write in sessions alert messages
         * @param string $type    error or success
         * @param string $message alert body
         */
            public function flash($type, $message)
            {
                Yii::$app->getSession()->setFlash($type == 'error' ? 'danger' : $type, $message);
            }

        public function back()
        {
            return $this->redirect(Yii::$app->request->referrer);
        }

        /**
         * Set return url for module in sessions
         * @param mixed $url if not set, returnUrl will be current page
         */
        public function setReturnUrl($url = null)
        {
            Yii::$app->getSession()->set($this->module->id . '_return', $url ? Url::to($url) : Url::current());
        }

        /**
         * Get return url for module from session
         * @param mixed $defaultUrl if return url not found in sessions
         * @return mixed
         */
        public function getReturnUrl($defaultUrl = null)
        {
            return Yii::$app->getSession()->get($this->module->id . '_return', $defaultUrl ? Url::to($defaultUrl) : Url::to('/admin/' . $this->module->id));
        }

        /**
         * Formats response depending on request type (ajax or not)
         * @param string $success
         * @param bool $back go back or refresh
         * @return mixed $result array if request is ajax.
         */
        public function formatResponse($success = '', $back = true)
        {
            if (Yii::$app->request->isAjax) {
                Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
                if ($this->error) {
                    return ['result' => 'error', 'message' => $this->error];
                } else {
                    $response = ['result' => 'success'];
                    if ($success) {
                        if (is_array($success)) {
                            $response = array_merge(['result' => 'success'], $success);
                        } else {
                            $response = array_merge(['result' => 'success'], ['message' => $success]);
                        }
                    }
                    return $response;
                }
            } else {
                if ($this->error) {
                    $this->flash('error', $this->error);
                } else {
                    if (is_array($success) && isset($success['message'])) {
                        $this->flash('success', $success['message']);
                    } elseif (is_string($success)) {
                        $this->flash('success', $success);
                    }
                }
                return $back ? $this->back() : $this->refresh();
            }
        }


        /**
         * Move category up/down
         * @param $id
         * @param $direction
         * @return \yii\web\Response
         * @throws \Exception
         */
        public function MoveCate($modelClass,$id, $direction)
        {

            if (($model = $modelClass::findOne($id))) {
                $up       = $direction == 'up';
                $orderDir = $up ? SORT_ASC : SORT_DESC;

                if ($model->depth == 0) {
                    $swapCat = $modelClass::find()->where([$up ? '>' : '<', 'order_num', $model->order_num])->orderBy(['order_num' => $orderDir])->one();
                    if ($swapCat) {
                        $modelClass::updateAll(['order_num' => '-1'], ['order_num' => $swapCat->order_num]);
                        $modelClass::updateAll(['order_num' => $swapCat->order_num], ['order_num' => $model->order_num]);
                        $modelClass::updateAll(['order_num' => $model->order_num], ['order_num' => '-1']);
                        $model->trigger(\yii\db\ActiveRecord::EVENT_AFTER_UPDATE);
                    }
                } else {
                    $where = [
                        'and',
                        ['tree' => $model->tree],
                        ['depth' => $model->depth],
                        [($up ? '<' : '>'), 'lft', $model->lft]
                    ];

                    $swapCat = $modelClass::find()->where($where)->orderBy(['lft' => ($up ? SORT_DESC : SORT_ASC)])->one();
                    if ($swapCat) {
                        if ($up) {
                            $model->insertBefore($swapCat);
                        } else {
                            $model->insertAfter($swapCat);
                        }

                        $swapCat->update();
                        $model->update();
                    }
                }
            } else {
                $this->flash('error', 'Not found');
            }
            return $this->back();
        }

        public function move($modelClass,$id, $direction, $condition = [])
        {
            $success = '';
            if(($model = $modelClass::findOne($id))){
                if($direction === 'up'){
                    $eq = '>';
                    $orderDir = 'ASC';
                } else {
                    $eq = '<';
                    $orderDir = 'DESC';
                }

                $query = $modelClass::find()->orderBy('time '.$orderDir)->limit(1);
                $where = [$eq, 'time', $model->time];
                /*if(count($condition)){
                    $where = ['and', $where];
                    foreach($condition as $key => $value){
                        $where[] = [$key => $value];
                    }
                }*/
                $modelSwap = $query->where($where)->one();
                if(!empty($modelSwap))
                {
                    $newOrderNum = $modelSwap->time;
                    $modelSwap->time = $model->time;
                    $modelSwap->update();
                    $model->time = $newOrderNum;
                    $model->update();

                    $success = ['swap_id' => $modelSwap->primaryKey];

                }
            }
            else{
                $this->error =  'Not found';
            }

            return $this->formatResponse($success);
        }
        /**
         * Change category status
         * @param $id
         * @param $status
         * @return mixed
         */
        public function changeStatusCate($modelClass,$id, $status)
        {
            $ids        = [];
            if (($model = $modelClass::findOne($id))) {
                $ids[] = $model->primaryKey;
                foreach ($model->children()->all() as $child) {
                    $ids[] = $child->primaryKey;
                }
                $modelClass::updateAll(['status' => $status], ['in', 'category_id', $ids]);
                $model->trigger(\yii\db\ActiveRecord::EVENT_AFTER_UPDATE);
            } else {
                $this->error = 'Not found';
            }

            return $this->formatResponse('Status successfully changed');
        }

        public function changeStatus($modelClass,$id, $field = 'status')
        {
            $error = 1;
            if(($model = $modelClass::findOne($id))){
                $model->$field   = ($model->$field == ACTIVE) ? INACTIVE : ACTIVE;
                if($model->update())
                    $error = 0;
            }
            if($error) {
                $error = 'Cập nhật thất bại';
                if($model && $model->errors) {
                    foreach ($model->errors as $name => $value) {
                        $error .= "\n".$value[0];
                    }

                }
                $this->error = $error;
            }

            return $this->formatResponse(['message'=>'Thay đổi trạng thái thành công.','status'=>isset($model->status)? $model->status : '']);
        }
    }
